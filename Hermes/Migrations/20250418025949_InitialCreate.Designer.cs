// <auto-generated />
using System;
using Hermes.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hermes.Migrations
{
    [DbContext(typeof(HermesLocalContext))]
    [Migration("20250418025949_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Hermes.Models.Defect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ErrorCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("ErrorFlag")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("StopId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnitUnderTestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StopId");

                    b.ToTable("Defect");
                });

            modelBuilder.Entity("Hermes.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Doctors", (string)null);
                });

            modelBuilder.Entity("Hermes.Models.Heartbeat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("ActPackRem")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("ActPackSeq")
                        .HasColumnType("INTEGER");

                    b.Property<float>("BakeCurrTemp")
                        .HasColumnType("REAL");

                    b.Property<uint>("BakeRemTime")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("BakeStat")
                        .HasColumnType("INTEGER");

                    b.Property<float>("BakeTgtTemp")
                        .HasColumnType("REAL");

                    b.Property<uint>("BakeTgtTime")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("CleanLiq")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("CoverBoxIn")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("CoverRemCnt")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("DevReset")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("EnvBrdStat")
                        .HasColumnType("INTEGER");

                    b.Property<float>("GasPress")
                        .HasColumnType("REAL");

                    b.Property<byte>("MotBrd1Stat")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("MotBrd2Stat")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("ScanTgt")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("SealLiq")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("SealMotFlow")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("SealMotRst")
                        .HasColumnType("INTEGER");

                    b.Property<float>("SensHumi")
                        .HasColumnType("REAL");

                    b.Property<float>("SensTemp")
                        .HasColumnType("REAL");

                    b.Property<byte[]>("SlideActStat")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("SlideBoxIn")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("SlideInInfo")
                        .IsRequired()
                        .HasMaxLength(188)
                        .HasColumnType("BLOB");

                    b.Property<byte>("SortMotFlow")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("SortMotRst")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Suck1Press")
                        .HasColumnType("REAL");

                    b.Property<float>("Suck2Press")
                        .HasColumnType("REAL");

                    b.Property<byte>("SysActStat")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Ts")
                        .HasColumnType("TEXT");

                    b.Property<byte>("WasteBoxIn")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("XyleneLiq")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Heartbeats");
                });

            modelBuilder.Entity("Hermes.Models.Slide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DoctorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntryDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PathologyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProgramId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("SlideId")
                        .HasMaxLength(16)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Slides", (string)null);
                });

            modelBuilder.Entity("Hermes.Models.Stop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Actions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRestored")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Stop");
                });

            modelBuilder.Entity("Hermes.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Department")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("StopUser", b =>
                {
                    b.Property<int>("StopsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StopsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("StopUser");
                });

            modelBuilder.Entity("Hermes.Models.Defect", b =>
                {
                    b.HasOne("Hermes.Models.Stop", null)
                        .WithMany("Defects")
                        .HasForeignKey("StopId");
                });

            modelBuilder.Entity("Hermes.Models.Slide", b =>
                {
                    b.HasOne("Hermes.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("StopUser", b =>
                {
                    b.HasOne("Hermes.Models.Stop", null)
                        .WithMany()
                        .HasForeignKey("StopsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hermes.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hermes.Models.Stop", b =>
                {
                    b.Navigation("Defects");
                });
#pragma warning restore 612, 618
        }
    }
}
