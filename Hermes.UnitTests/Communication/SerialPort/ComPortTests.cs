using Hermes.Communication.SerialPort;
using Moq;

namespace HermesTests.Communication.SerialPort;

public class ComPortTests : IClassFixture<ComPortFixture>
{
    private readonly ComPortFixture _fixture;
    public ComPortTests(ComPortFixture fixture)
    {
        _fixture = fixture;
    }

    [Fact]
    public async Task MoveFromHeadToTail()
    {
        var clearAll = new FlowActionWrite().
                WithOperationType(0x00). // 清空
                WithMasterAddress<FlowActionWrite>(0xF2).
                WithSlaveAddress<FlowActionWrite>(0x13).
                WithActionSequence(new byte[] { 0x00, 0x00 }).
                WithActionType(0x02).
                WithPickCount(0x00).
                WithSrcDstLocations(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }).
                GenData();
        await _fixture.comPort.SendPacketAsync(clearAll);
        await Task.Delay(1000);

        var actionCount = 20;
        var actionsCountBytes = BitConverter.GetBytes(actionCount).Reverse().ToArray();
        var locations = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
        var packet = new FlowActionWrite().
                        WithOperationType(0x02). // 操作类型：2 写入动作包总数
                        WithMasterAddress<FlowActionWrite>(0xF2).
                        WithSlaveAddress<FlowActionWrite>(0x13).
                        WithActionSequence(actionsCountBytes). // 动作包总数
                        WithActionType(0x02). // 动作类型：2：理片
                        WithPickCount(0x00).  // 抓取次数：0次
                        WithSrcDstLocations(locations).
                        GenData();
        await _fixture.comPort.SendPacketAsync(packet);
        await Task.Delay(200);

        byte[][] locationPairs = new byte[][]
        {
            new byte[] { 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            new byte[] { 0x00, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            new byte[] { 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            new byte[] { 0x00, 0x04, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            new byte[] { 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            new byte[] { 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            new byte[] { 0x00, 0x07, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            new byte[] { 0x00, 0x08, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            new byte[] { 0x00, 0x09, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            new byte[] { 0x00, 0x0A, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            new byte[] { 0x00, 0x0B, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            new byte[] { 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            new byte[] { 0x00, 0x0D, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            new byte[] { 0x00, 0x0E, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            new byte[] { 0x00, 0x0F, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            new byte[] { 0x00, 0x10, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            new byte[] { 0x00, 0x11, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            new byte[] { 0x00, 0x12, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            new byte[] { 0x00, 0x13, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            new byte[] { 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
        };

        Enumerable.Range(0, actionCount).ToList().ForEach(async i =>
        {
            var actionPacket = new FlowActionWrite()
                .WithOperationType(0x01)
                .WithActionSequence(BitConverter.GetBytes(i + 1).Reverse().ToArray())
                .WithMasterAddress<FlowActionWrite>(0xF2)
                .WithSlaveAddress<FlowActionWrite>(0x13)
                .WithActionType(0x02)
                .WithPickCount(0x01)
                .WithSrcDstLocations(locationPairs[i])
                .GenData();

            await _fixture.comPort.SendPacketAsync(actionPacket);
            await Task.Delay(200);
        });

        //locations = new byte[] { 0x00, 0x08, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        //                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
        //var actionPacketOne = new FlowActionWrite().
        //                        WithOperationType(0x01).
        //                        WithActionSequence(new byte[] { 0x00, 0x01 }). // 操作类型：1 写入动作包序号
        //                        WithMasterAddress<FlowActionWrite>(0xF2).
        //                        WithSlaveAddress<FlowActionWrite>(0x13).
        //                        WithActionType(0x02). // 动作类型：2：理片
        //                        WithPickCount(0x01).  // 抓取次数：1次
        //                        WithSrcDstLocations(locations).
        //                        GenData();
        //await _fixture.comPort.SendPacketAsync(actionPacketOne);
        //await Task.Delay(200);
        //await _fixture.comPort.SendPacketAsync(new FlowActionWrite().
        //                        WithOperationType(0x01).
        //                        WithActionSequence(new byte[] { 0x00, 0x02 }).
        //                        WithMasterAddress<FlowActionWrite>(0xF2).
        //                        WithSlaveAddress<FlowActionWrite>(0x13).
        //                        WithActionType(0x02).
        //                        WithPickCount(0x01).
        //                        WithSrcDstLocations(new byte[] { 0x00, 0x09, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        //                                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }).
        //                        GenData());
        //await Task.Delay(200);
        //await _fixture.comPort.SendPacketAsync(new FlowActionWrite().
        //                WithOperationType(0x01).
        //                WithActionSequence(new byte[] { 0x00, 0x03 }).
        //                WithMasterAddress<FlowActionWrite>(0xF2).
        //                WithSlaveAddress<FlowActionWrite>(0x13).
        //                WithActionType(0x02).
        //                WithPickCount(0x01).
        //                WithSrcDstLocations(new byte[] { 0x00, 0x0A, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        //                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }).
        //                GenData());
        //await Task.Delay(200);
        //await _fixture.comPort.SendPacketAsync(new FlowActionWrite().
        //                WithOperationType(0x01).
        //                WithActionSequence(new byte[] { 0x00, 0x04 }).
        //                WithMasterAddress<FlowActionWrite>(0xF2).
        //                WithSlaveAddress<FlowActionWrite>(0x13).
        //                WithActionType(0x02).
        //                WithPickCount(0x01).
        //                WithSrcDstLocations(new byte[] { 0x00, 0x0B, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        //                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }).
        //                GenData());
        //await Task.Delay(200);
        //await _fixture.comPort.SendPacketAsync(new FlowActionWrite().
        //                WithOperationType(0x01).
        //                WithActionSequence(new byte[] { 0x00, 0x05 }).
        //                WithMasterAddress<FlowActionWrite>(0xF2).
        //                WithSlaveAddress<FlowActionWrite>(0x13).
        //                WithActionType(0x02).
        //                WithPickCount(0x01).
        //                WithSrcDstLocations(new byte[] { 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        //                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }).
        //                GenData());
        //await Task.Delay(200);

        var actionsQuery = new FlowActionRead().
                                WithQuery(0x00);
        await _fixture.comPort.SendPacketAsync(actionsQuery);
        await Task.Delay(200);

        var queryStepOne = new FlowActionRead().
                        WithQuery(0x01);
        await _fixture.comPort.SendPacketAsync(queryStepOne);
        await Task.Delay(200);

        var boxTags = new byte[75];
        boxTags[0] = 0x01;
        var executeAction = new SystemStatusWrite().
                            WithOperationType(0x05).
                            WithMasterAddress<SystemStatusWrite>(0xF2).
                            WithSlaveAddress<SystemStatusWrite>(0x13).
                            WithBoxTags(boxTags);
        await _fixture.comPort.SendPacketAsync(executeAction);
        await Task.Delay(1000);
    }
}

public class ComPortFixture : IAsyncLifetime
{
    public ComPort comPort { get; private set; }

    public async Task InitializeAsync()
    {
        var mockServiceProvider = new Mock<IServiceProvider>();
        var frameParser = new FrameParser(mockServiceProvider.Object);
        comPort = new ComPort(frameParser);
        await comPort.InitializeAsync("COM4", 115200);
    }

    public async Task DisposeAsync()
    {
        await comPort.ClientSafeCloseAsync();
    }
}
